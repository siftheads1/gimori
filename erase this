
import cv2
import os
import numpy as np
import random
import pickle
import warnings
import argparse

from constants import DATA_DIR

TRAIN_SIZE = 9800
TEST_SIZE = 200
IMG_SIZE = 75
SIZE = 5
QUESTION_SIZE = 18  ## 2 x (6 for one-hot vector of color), 3 for question type, 3 for question subtype
Q_TYPE_IDX = 12
SUB_Q_TYPE_IDX = 15
"""Answer : [yes, no, rectangle, circle, r, g, b, o, k, y]"""
NB_QUESTIONS = 10
COLORS = [
    (0, 0, 255),        # r
    (0, 255, 0),        # g
    (255, 0, 0),        # b
    (0, 156, 255),      # o
    (128, 128, 128),    # k
    (0, 255, 255)       # y
]


def main():
    args = parse_args()
    os.makedirs(DATA_DIR, exist_ok=True)

    random.seed(args.seed)
    np.random.seed(args.seed)

    print('building test datasets...')
    test_datasets = [build_dataset(args.t_subtype) for _ in range(TEST_SIZE)]

    print('building train datasets...')
    train_datasets = [build_dataset(args.t_subtype) for _ in range(TRAIN_SIZE)]

    print('saving datasets...')
    filename = os.path.join(DATA_DIR, 'sort-of-clevr.pickle')
    with open(filename, 'wb') as f:
        pickle.dump((train_datasets, test_datasets), f)
    print('datasets saved at {}'.format(filename))


def build_dataset(t_subtype):
    objects = []
    img = np.ones((IMG_SIZE, IMG_SIZE, 3)) * 255
    for color_id, color in enumerate(COLORS):
        center = center_generate(objects)
        if random.random() < 0.5:
            start = (center[0] - SIZE, center[1] - SIZE)
            end = (center[0] + SIZE, center[1] + SIZE)
            cv2.rectangle(img, start, end, color, -1)
            objects.append((color_id, center, 'r'))
        else:
            center_ = (center[0], center[1])
            cv2.circle(img, center_, SIZE, color, -1)
            objects.append((color_id, center, 'c'))

    norelations = generate_non_relational_questions(objects)
    binary_relations = generate_binary_relational_questions(objects)
    ternary_relations = generate_ternary_relational_questions(objects, t_subtype)

    img = img/255.
    dataset = (img, ternary_relations, binary_relations, norelations)
    return dataset


def center_generate(objects):
    while True:
        pas = True
        center = np.random.randint(0 + SIZE, IMG_SIZE - SIZE, 2)
        if len(objects) > 0:
            for name,c,shape in objects:
                if ((center - c) ** 2).sum() < ((SIZE * 2) ** 2):
                    pas = False
        if pas:
            return center


def generate_non_relational_questions(objects):
    """Non-relational questions"""
    norel_questions = []
    norel_answers = []

    for _ in range(NB_QUESTIONS):
        question = np.zeros((QUESTION_SIZE))
        color = random.randint(0,5)
        question[color] = 1
        question[Q_TYPE_IDX] = 1
        subtype = random.randint(0,2)
        question[subtype + SUB_Q_TYPE_IDX] = 1
        norel_questions.append(question)
        """Answer : [yes, no, rectangle, circle, r, g, b, o, k, y]"""
        if subtype == 0:
            """query shape->rectangle/circle"""
            if objects[color][2] == 'r':
                answer = 2
            else:
                answer = 3

        elif subtype == 1:
            """query horizontal position->yes/no"""
            if objects[color][1][0] < IMG_SIZE / 2:
                answer = 0
            else:
                answer = 1

        elif subtype == 2:
            """query vertical position->yes/no"""
            if objects[color][1][1] < IMG_SIZE / 2:
                answer = 0
            else:
                answer = 1
        norel_answers.append(answer)

    return norel_questions, norel_answers


def generate_binary_relational_questions(objects):
    """Binary Relational questions"""
    binary_questions = []
    binary_answers = []

    for _ in range(NB_QUESTIONS):
        question = np.zeros((QUESTION_SIZE))
        color = random.randint(0,5)
        question[color] = 1
        question[Q_TYPE_IDX + 1] = 1
        subtype = random.randint(0,2)
        question[subtype + SUB_Q_TYPE_IDX] = 1
        binary_questions.append(question)

        if subtype == 0:
            """closest-to->rectangle/circle"""
            my_obj = objects[color][1]
            dist_list = [((my_obj - obj[1]) ** 2).sum() for obj in objects]
            dist_list[dist_list.index(0)] = 999
            closest = dist_list.index(min(dist_list))
            if objects[closest][2] == 'r':
                answer = 2
            else:
                answer = 3

        elif subtype == 1:
            """furthest-from->rectangle/circle"""
            my_obj = objects[color][1]
            dist_list = [((my_obj - obj[1]) ** 2).sum() for obj in objects]
            furthest = dist_list.index(max(dist_list))
            if objects[furthest][2] == 'r':
                answer = 2
            else:
                answer = 3

        elif subtype == 2:
            """count->1~6"""
            my_obj = objects[color][2]
            count = -1
            for obj in objects:
                if obj[2] == my_obj:
                    count +=1
            answer = count+4

        binary_answers.append(answer)

    return binary_questions, binary_answers


def generate_ternary_relational_questions(objects, t_subtype):
    """Ternary Relational questions"""
    ternary_questions = []
    ternary_answers = []

    for _ in range(NB_QUESTIONS):
        question = np.zeros((QUESTION_SIZE))
        rnd_colors = np.random.permutation(np.arange(5))
        # 1st object
        color1 = rnd_colors[0]
        question[color1] = 1
        # 2nd object
        color2 = rnd_colors[1]
        question[6 + color2] = 1

        question[Q_TYPE_IDX + 2] = 1

        if 0 <= t_subtype < 3:
            subtype = t_subtype
        else:
            subtype = random.randint(0, 2)

        question[subtype + SUB_Q_TYPE_IDX] = 1
        ternary_questions.append(question)

        # get coordinates of object from question
        A = objects[color1][1]
        B = objects[color2][1]

        if subtype == 0:
            """between->1~4"""

            between_count = 0
            # check is any objects lies inside the box
            for other_obj in objects:
                # skip object A and B
                if (other_obj[0] == color1) or (other_obj[0] == color2):
                    continue

                # Get x and y coordinate of third object
                other_objx = other_obj[1][0]
                other_objy = other_obj[1][1]

                if (A[0] <= other_objx <= B[0] and A[1] <= other_objy <= B[1]) or \
                        (A[0] <= other_objx <= B[0] and B[1] <= other_objy <= A[1]) or \
                        (B[0] <= other_objx <= A[0] and B[1] <= other_objy <= A[1]) or \
                        (B[0] <= other_objx <= A[0] and A[1] <= other_objy <= B[1]):
                    between_count += 1

            answer = between_count + 4
        elif subtype == 1:
            """is-on-band->yes/no"""

            grace_threshold = 12  # half of the size of objects
            epsilon = 1e-10
            m = (B[1]-A[1])/((B[0]-A[0]) + epsilon ) # add epsilon to prevent dividing by zero
            c = A[1] - (m*A[0])

            answer = 1  # default answer is 'no'

            # check if any object lies on/close the line between object A and object B
            for other_obj in objects:
                # skip object A and B
                if (other_obj[0] == color1) or (other_obj[0] == color2):
                    continue

                other_obj_pos = other_obj[1]

                # y = mx + c
                y = (m*other_obj_pos[0]) + c
                if (y - grace_threshold)  <= other_obj_pos[1] <= (y + grace_threshold):
                    answer = 0
        elif subtype == 2:
            """count-obtuse-triangles->1~6"""

            obtuse_count = 0

            # disable warnings
            # the angle computation may fail if the points are on a line
            warnings.filterwarnings("ignore")
            for other_obj in objects:
                # skip object A and B
                if (other_obj[0] == color1) or (other_obj[0] == color2):
                    continue

                # get position of 3rd object
                C = other_obj[1]
                # edge length
                a = np.linalg.norm(B - C)
                b = np.linalg.norm(C - A)
                c = np.linalg.norm(A - B)
                # angles by law of cosine
                alpha = np.rad2deg(np.arccos((b ** 2 + c ** 2 - a ** 2) / (2 * b * c)))
                beta = np.rad2deg(np.arccos((a ** 2 + c ** 2 - b ** 2) / (2 * a * c)))
                gamma = np.rad2deg(np.arccos((a ** 2 + b ** 2 - c ** 2) / (2 * a * b)))
                max_angle = max(alpha, beta, gamma)
                if 90 <= max_angle < 180:
                    obtuse_count += 1

            warnings.filterwarnings("default")
            answer = obtuse_count + 4

        ternary_answers.append(answer)

    return ternary_questions, ternary_answers


def parse_args():
    parser = argparse.ArgumentParser(description='Sort-of-CLEVR dataset generator')
    parser.add_argument('--seed', type=int, default=1, metavar='S',
                        help='random seed (default: 1)')
    parser.add_argument('--t-subtype', type=int, default=-1,
                        help='Force ternary questions to be of a given type')
    return parser.parse_args()


if __name__ == '__main__':
    main()
Â© 2021 GitHub, Inc.
Terms
Privacy
Security
Status
Docs
Contact GitHub
Pricing
API
Training
Blog
About
Loading complete
